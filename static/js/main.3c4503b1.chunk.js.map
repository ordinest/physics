{"version":3,"sources":["Components/Toolbar/index.js","Components/Positioned/index.js","Utilities/spectralUtilities.js","Components/Workbench/Screen.js","index.js","Components/Workbench/Source.js","Components/Workbench/Grate.js","Components/Workbench/Rays.js","Components/Workbench/index.js","Components/SpectralLab/index.js","App.js"],"names":["useStyles","createUseStyles","toolbarStyle","height","padding","color","itemStyle","display","flexDirection","gap","labelStyle","fontWeight","selectStyle","background","Toolbar","sources","currentSource","onChangeSource","gratings","currentGrating","onChangeGrating","currentScreenDistance","minScreenDistance","maxScreenDistance","onChangeScreenDistance","classes","className","onSubmit","e","preventDefault","style","flexFlow","justifyContent","alignItems","width","htmlFor","id","defaultValue","onChange","target","value","Object","keys","map","source","key","name","grating","type","min","max","step","Positioned","props","coordinates","x","y","position","left","top","transform","children","wavelengthToColor","wavelength","R","G","B","alpha","diffractionHeight","d","lambda","a","Math","sqrt","Component","Screen","screenDistance","gratingSpacing","lines","line","border","borderLeft","borderRight","boxSizing","SpectralLine","margin","fontSize","round","i","Fragment","Source","glow","borderRadius","borderColor","boxShadow","Grate","Rays","sourceCoordinates","screenCoordinates","screenHeight","gratePosition","diffractionSpacing","stroke","strokeDasharray","sourceRayStyle","diffractedRaysStyle","right","x1","y1","x2","y2","dline","Workbench","grateX","minHeight","sourceColor","sourceBorder","sourceGlow","period","SpectralLab","useState","elements","hydrogen","setSource","setGrating","setScreenDistance","screenRange","newSource","newGrating","newDistance","App","root","document","getElementById","ReactDOM","render"],"mappings":"qQAIMA,EAAYC,YAAgB,CAC9BC,aAAc,CACVC,OAAO,SACPC,QAAQ,MACRC,MAAO,SAEXC,UAAW,CACPC,QAAS,OACTC,cAAe,MACfC,IAAK,WAETC,WAAY,CACRC,WAAY,QAEhBC,YAAa,CACTC,WAAY,QACZR,MAAO,WA4FAS,EA9EC,SAAC,GAWV,IAAD,IAVFC,eAUE,MAVQ,GAUR,EATFC,EASE,EATFA,cACAC,EAQE,EARFA,eAQE,IAPFC,gBAOE,MAPS,GAOT,MANFC,sBAME,MANe,KAMf,EALFC,EAKE,EALFA,gBACAC,EAIE,EAJFA,sBACAC,EAGE,EAHFA,kBACAC,EAEE,EAFFA,kBACAC,EACE,EADFA,uBAEMC,EAAUzB,IAEhB,OACI,yBAAK0B,UAAWD,EAAQvB,cACpB,0BAAMyB,SAAU,SAAAC,GAAC,OAAIA,EAAEC,kBAAkBC,MAAO,CAC5CvB,QAAS,OACTwB,SAAU,WACVtB,IAAK,OACLuB,eAAgB,SAChBC,WAAY,SACZ9B,OAAQ,OACR+B,MAAO,SAEP,yBAAKR,UAAWD,EAAQnB,WACpB,2BAAO6B,QAAQ,SAAST,UAAWD,EAAQf,YACvC,yCAEJ,4BACIgB,UAAWD,EAAQb,YACnBwB,GAAG,SACHC,aAAcrB,EACdsB,SAAU,SAAAV,GAAC,OAAIX,EAAeF,EAAQa,EAAEW,OAAOC,UAE9CC,OAAOC,KAAK3B,GAAS4B,KAAI,SAAAC,GAAM,OAC5B,4BAAQJ,MAAOI,EAAQC,IAAKD,GACvB7B,EAAQ6B,GAAQE,WAKjC,yBAAKpB,UAAWD,EAAQnB,WACpB,2BAAO6B,QAAQ,UAAUT,UAAWD,EAAQf,YACxC,0CAEJ,4BACIgB,UAAWD,EAAQb,YACnBwB,GAAG,UACHC,aAAclB,EACdmB,SAAU,SAAAV,GAAC,OAAIR,EAAgBF,EAASU,EAAEW,OAAOC,UAEhDC,OAAOC,KAAKxB,GAAUyB,KAAI,SAAAI,GAAO,OAC9B,4BAAQP,MAAOO,EAASF,IAAKE,GACxB7B,EAAS6B,GAASD,WAKnC,yBAAKpB,UAAWD,EAAQnB,WACpB,2BAAO6B,QAAQ,WAAWT,UAAWD,EAAQf,YACzC,kDAAwBW,EAAxB,SAEJ,2BACI2B,KAAK,QACLZ,GAAG,WACHa,IAAK3B,EACL4B,IAAK3B,EACL4B,KAAK,IACLd,aAAchB,EACdiB,SAAU,SAAAV,GAAC,OAAIJ,EAAuBI,EAAEW,OAAOC,cCrFxDY,G,MAjBI,SAAAC,GAAU,IAAD,EAGpBA,EADAC,mBAFoB,MAEN,CAAEC,EAAG,EAAGC,EAAG,GAFL,EAKxB,OACI,yBAAK1B,MAAO,CACR2B,SAAU,WACVC,KAAK,GAAD,OAAKJ,EAAYC,EAAjB,KACJI,IAAI,GAAD,OAAKL,EAAYE,EAAjB,KACHI,UAAW,sCAEVP,EAAMQ,YCdZ,SAASC,EAAkBC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EAqDJ,OAnDSJ,GAGC,KAHDA,EAGa,KAClBC,GAAK,GAJAD,EAIU,KAAX,GACJE,EAAI,EACJC,EAAI,GANCH,GAOO,KAPPA,EAOmB,KACzBC,EAAI,EACJC,GATMF,EASI,KAAN,GACJG,EAAI,GAVEH,GAWQ,KAXRA,EAWoB,KACzBC,EAAI,EACJC,EAAI,EACJC,GAAK,GAdAH,EAcU,KAAX,IAdCA,GAeQ,KAfRA,EAeoB,KACzBC,GAhBKD,EAgBK,KAAN,GACJE,EAAI,EACJC,EAAI,GAlBCH,GAmBQ,KAnBRA,EAmBoB,KACzBC,EAAI,EACJC,GAAK,GArBAF,EAqBU,KAAX,GACJG,EAAI,GAtBCH,GAuBQ,KAvBRA,GAuBqB,KAC1BC,EAAI,EACJC,EAAI,EACJC,EAAI,IAEJF,EAAI,EACJC,EAAI,EACJC,EAAI,GAcK,CAAC,QAAe,IAAJF,EAAW,KAAY,IAAJC,EAAW,KAAY,IAAJC,EAAW,OATtEC,EAnCKJ,EAkCA,KAlCAA,EAkCY,IACT,EAnCHA,EAoCO,KACH,IArCJA,GAqCG,GArCHA,EAsCO,KAtCPA,EAuCS,KAAN,GAEA,GAG8E,IAAKC,EAAGC,EAAGC,EAAGC,GAkBrG,SAASC,EAAkBC,EAAGC,EAAQC,GACzC,OAAOF,EAAIC,EAASE,KAAKC,KAAKF,EAAIA,EAAID,EAASA,GChEnD,ICCkBI,ED+DHC,EAhEA,SAAAtB,GAAU,IACbuB,EAAwDvB,EAAxDuB,eAAgBC,EAAwCxB,EAAxCwB,eAAgBvB,EAAwBD,EAAxBC,YAAanD,EAAWkD,EAAXlD,OAC/C2E,EAAQzB,EAAMyB,MAAMnC,KAAI,SAAAoC,GAAI,MAAK,CACnChB,WAAYgB,EACZ5E,OAAQiE,EAAkBQ,EAAgBG,EAAMF,GAChDxE,MAAOyD,EAAkBiB,GAAM,OAG7BjD,EAAQ,CACV2B,SAAU,WACVtD,OAAO,GAAD,OAAKA,GACX+B,MAAO,QACP0B,UAAW,mBACXoB,OAAQ,OACRC,WAAY,kBACZC,YAAa,kBACbC,UAAW,aACXtE,WAAY,SAGVuE,EAAe,SAAC,GAAuB,IAArB/E,EAAoB,EAApBA,MAAOF,EAAa,EAAbA,OAC3B,OACI,yBAAK2B,MAAO,CACR2B,SAAU,WACVE,IAAK,MACLzB,MAAO,QACP0B,UAAU,cAAD,SAAkBzD,EAAS,GAA3B,OACTA,OAAQ,MACRI,QAAS,OACTC,cAAe,MACfyB,WAAY,SACZxB,IAAK,QAEL,yBAAKqB,MAAO,CACRI,MAAO,QACP/B,OAAQ,MACRkF,OAAQ,QACRxE,WAAYR,KAEhB,yBAAKyB,MAAO,CACRzB,MAAO,QACPiF,SAAU,aACVd,KAAKe,MAAMpF,GAHf,QAQZ,OACI,kBAAC,EAAD,CAAYmD,YAAaA,GACrB,yBAAKxB,MAAO,CAACvB,QAAQ,OAAOC,cAAc,QACtC,yBAAKsB,MAAOA,GACR,kBAACsD,EAAD,CAAc/E,MAAM,QAAQF,OAAQ,IACnC2E,EAAMnC,KAAI,SAACoC,EAAMS,GAAP,OACP,kBAAC,IAAMC,SAAP,CAAgB5C,IAAK2C,GACjB,kBAACJ,EAAD,CAAc/E,MAAO0E,EAAK1E,MAAOF,OAAQ4E,EAAK5E,SAC9C,kBAACiF,EAAD,CAAc/E,MAAO0E,EAAK1E,MAAOF,QAAS4E,EAAK5E,iBElC5DuF,EAvBA,SAAC,GAKT,IAJHpC,EAIE,EAJFA,YACAjD,EAGE,EAHFA,MACA2E,EAEE,EAFFA,OACAW,EACE,EADFA,KAEA,OACI,kBAAC,EAAD,CAAYrC,YAAaA,GACrB,yBACI5B,UAAU,SACVI,MAAO,CACH3B,OAAQ,OACR+B,MAAO,OACP0D,aAAc,MACd/E,WAAW,GAAD,OAAKR,GACfwF,YAAY,GAAD,OAAKb,GAChBc,UAAU,GAAD,OAAKH,EAAL,uBCCdI,EAjBD,SAAC,GAER,IAAD,IADFzC,mBACE,MADY,CAAEC,EAAG,EAAGC,EAAG,GACvB,EACF,OACI,kBAAC,EAAD,CAAYF,YAAaA,GACrB,yBACI5B,UAAU,QACVI,MAAO,CACHI,MAAO,MACP/B,OAAQ,QACRU,WAAY,YCqDjBmF,EA/DF,SAAA3C,GAAU,IAEfC,EAOAD,EAPAC,YACA2C,EAMA5C,EANA4C,kBACAC,EAKA7C,EALA6C,kBACAC,EAIA9C,EAJA8C,aACAvB,EAGAvB,EAHAuB,eACAwB,EAEA/C,EAFA+C,cACAC,EACAhD,EADAgD,mBAGEvE,EAAQ,CACV2B,SAAU,WACVE,IAAI,GAAD,OAAKL,EAAYC,EAAjB,KACHK,UAAW,mBACX1B,MAAO,OACP/B,OAAO,GAAD,OAAKgG,EAAL,MACNG,OAAQ,QACRC,gBAAiB,OAEfC,EAAiB,CACnB/C,SAAU,WACVC,KAAK,GAAD,OAAKuC,EAAkB1C,EAAvB,KACJrB,MAAM,GAAD,OAAKkE,EAAgBH,EAAkB1C,EAAvC,KACLpD,OAAQ,QAENsG,EAAsB,CACxBhD,SAAU,WACViD,MAAM,GAAD,OAAK,IAAMR,EAAkB3C,EAA7B,KACLrB,MAAM,GAAD,OAAKgE,EAAkB3C,EAAI6C,EAA3B,KACLjG,OAAQ,QAGZ,OACI,yBAAK2B,MAAOA,GACR,yBAAKA,MAAO0E,GACR,0BAAMG,GAAG,IAAIC,GAAG,MAAMC,GAAG,OAAOC,GAAG,SAEvC,yBAAKhF,MAAO2E,GACR,0BAAME,GAAG,OAAOC,GAAG,MAAMC,GAAG,IAAIC,GAAG,QAClCzD,EAAMyB,MAAMnC,KAAI,SAAAoE,GAAK,OAClB,kBAAC,IAAMtB,SAAP,CAAgB5C,IAAKkE,GACjB,0BACIJ,GAAG,OACHC,GAAE,WAAMT,EAAe,EAAI/B,EAAkBQ,EAAgBmC,EAAOV,IAAuBF,EAAe,IAAxG,KACFU,GAAG,IACHC,GAAG,MACHhF,MAAO,CAAEwE,OAAQxC,EAAkBiD,GAAO,MAE9C,0BACIJ,GAAG,OACHC,GAAE,UAAK,KAAOT,EAAe,EAAI/B,EAAkBQ,EAAgBmC,EAAOV,IAAuBF,EAAe,IAA9G,KACFU,GAAG,IACHC,GAAG,MACHhF,MAAO,CAAEwE,OAAQxC,EAAkBiD,GAAO,aCHvDC,EA9CG,SAAC,GAMZ,IALHpE,EAKE,EALFA,OACAG,EAIE,EAJFA,QACA6B,EAGE,EAHFA,eACAtD,EAEE,EAFFA,kBAKM2F,EAAS,GAAK,IAAMrC,EAAiBtD,IAHzC,EADFC,kBAIqFD,GAErF,OACI,yBAAKI,UAAU,YAAYI,MAAO,CAAEoF,UALnB,MAMb,yBAAKxF,UAAU,WACX,kBAAC,EAAD,CACI4B,YAAa,CAAEC,EAAG,GAAIC,EAAG,IACzBnD,MAAOuC,EAAOuE,YACdnC,OAAQpC,EAAOwE,aACfzB,KAAM/C,EAAOyE,aAEjB,kBAAC,EAAD,CACI/D,YAAa,CAAEC,EAAG0D,EAAQzD,EAAG,MAEjC,kBAAC,EAAD,CACIF,YAAa,CAAEC,EAAG,GAAIC,EAAG,IACzBrD,OAAM,UAlBD,IAkBC,MACNgH,YAAavE,EAAOuE,YACpBvC,eAAgBA,EAChBC,eAAgB9B,EAAQuE,OACxBxC,MAAOlC,EAAOkC,QAElB,kBAAC,EAAD,CACImB,kBAAmB,CAAE1C,EAAG,GAAIC,EAAG,IAC/B0C,kBAAmB,CAAE3C,EAAG,GAAIC,EAAG,IAC/B2C,aA3BK,IA4BLvB,eAAgBA,EAChByB,mBAAoBtD,EAAQuE,OAC5BhE,YAAa,CAAEC,EAAG,GAAIC,EAAG,IACzB4C,cAAea,EACfnC,MAAOlC,EAAOkC,W,cCVnByC,EA/BK,WAAO,IAAD,EACMC,mBAASC,EAASC,UADxB,mBACf9E,EADe,KACP+E,EADO,OAEQH,mBAAStG,EAAS,IAF1B,mBAEf6B,EAFe,KAEN6E,EAFM,OAGsBJ,mBAAS,KAH/B,mBAGf5C,EAHe,KAGCiD,EAHD,KAIhBC,EAAc,CAAC,IAAK,KAE1B,OACI,6BACI,kBAAC,EAAD,CACI/G,QAAS0G,EACTzG,cAAe4B,EACf3B,eAAgB,SAAA8G,GAAS,OAAIJ,EAAUI,IACvC7G,SAAUA,EACVC,eAAgB4B,EAChB3B,gBAAiB,SAAA4G,GAAU,OAAIJ,EAAWI,IAC1C3G,sBAAuBuD,EACvBtD,kBAAmBwG,EAAY,GAC/BvG,kBAAmBuG,EAAY,GAC/BtG,uBAAwB,SAAAyG,GAAW,OAAIJ,EAAkBI,MAE7D,kBAAC,EAAD,CACIrF,OAAQA,EACRG,QAASA,EACT6B,eAAgBA,EAChBtD,kBAAmBwG,EAAY,GAC/BvG,kBAAmBuG,EAAY,OCpBhCI,EARH,WACV,OACE,6BACE,kBAAC,EAAD,QNDAC,G,MAAOC,SAASC,eAAe,SACnB3D,EAORwD,EANRI,IAASC,OACP,kBAAC7D,EAAD,MACAyD,I","file":"static/js/main.3c4503b1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { createUseStyles } from 'react-jss'\r\n\r\n// Create styles for toolbar components\r\nconst useStyles = createUseStyles({\r\n    toolbarStyle: {\r\n        height: `2.5rem`,\r\n        padding: `2px`,\r\n        color: 'white',\r\n    },\r\n    itemStyle: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        gap: '0.25rem',\r\n    },\r\n    labelStyle: {\r\n        fontWeight: 'bold',\r\n    },\r\n    selectStyle: {\r\n        background: 'black',\r\n        color: 'white',\r\n    }\r\n})\r\n\r\n/**\r\n * Toolbar component for the Spectral Identification lab.\r\n * @param {Object} sources Object with entries for each source.\r\n * @param {Object} currentSource Object of the currently active source.\r\n * @param {Function} onChangeSource Callback when source selection changes.\r\n * @param {Number} currentScreenDistance Number for the current screen distance.\r\n * @param {Function} onChangeScreenDistance Callback when screen distance changes.\r\n * @param {Object} gratings Object with entries for each grating configuration.\r\n * @param {Function} onChangegrating Callback when grating selection changes.\r\n */\r\nconst Toolbar = ({\r\n    sources = {},\r\n    currentSource,\r\n    onChangeSource,\r\n    gratings = {},\r\n    currentGrating = null,\r\n    onChangeGrating,\r\n    currentScreenDistance,\r\n    minScreenDistance,\r\n    maxScreenDistance,\r\n    onChangeScreenDistance,\r\n}) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.toolbarStyle}>\r\n            <form onSubmit={e => e.preventDefault()} style={{\r\n                display: 'flex',\r\n                flexFlow: 'row wrap',\r\n                gap: '2rem',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                height: '100%',\r\n                width: '100%',\r\n            }}>\r\n                <div className={classes.itemStyle}>\r\n                    <label htmlFor='source' className={classes.labelStyle}>\r\n                        <span>Source</span>\r\n                    </label>\r\n                    <select\r\n                        className={classes.selectStyle}\r\n                        id='source'\r\n                        defaultValue={currentSource}\r\n                        onChange={e => onChangeSource(sources[e.target.value])}\r\n                    >\r\n                        {Object.keys(sources).map(source => (\r\n                            <option value={source} key={source}>\r\n                                {sources[source].name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className={classes.itemStyle}>\r\n                    <label htmlFor='grating' className={classes.labelStyle}>\r\n                        <span>Grating</span>\r\n                    </label>\r\n                    <select\r\n                        className={classes.selectStyle}\r\n                        id='grating'\r\n                        defaultValue={currentGrating}\r\n                        onChange={e => onChangeGrating(gratings[e.target.value])}\r\n                    >\r\n                        {Object.keys(gratings).map(grating => (\r\n                            <option value={grating} key={grating}>\r\n                                {gratings[grating].name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className={classes.itemStyle}>\r\n                    <label htmlFor='distance' className={classes.labelStyle}>\r\n                        <span>Screen Distance ({currentScreenDistance} mm)</span>\r\n                    </label>\r\n                    <input\r\n                        type='range'\r\n                        id='distance'\r\n                        min={minScreenDistance}\r\n                        max={maxScreenDistance}\r\n                        step='1'\r\n                        defaultValue={currentScreenDistance}\r\n                        onChange={e => onChangeScreenDistance(e.target.value)}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Toolbar","import React from 'react'\r\n\r\nconst Positioned = props => {\r\n    let {\r\n        coordinates = { x: 0, y: 0 },\r\n    } = props\r\n    \r\n    return(\r\n        <div style={{\r\n            position: 'absolute',\r\n            left: `${coordinates.x}%`,\r\n            top: `${coordinates.y}%`,\r\n            transform: 'translateY(-50%) translateX(-50%)',\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Positioned","export function wavelengthToColor(wavelength) {\r\n    var R,\r\n        G,\r\n        B,\r\n        alpha,\r\n        colorSpace,\r\n        wl = wavelength\r\n  \r\n  \r\n    if (wl >= 380 && wl < 440) {\r\n        R = -1 * (wl - 440) / (440 - 380);\r\n        G = 0;\r\n        B = 1;\r\n   } else if (wl >= 440 && wl < 490) {\r\n       R = 0;\r\n       G = (wl - 440) / (490 - 440);\r\n       B = 1;  \r\n    } else if (wl >= 490 && wl < 510) {\r\n        R = 0;\r\n        G = 1;\r\n        B = -1 * (wl - 510) / (510 - 490);\r\n    } else if (wl >= 510 && wl < 580) {\r\n        R = (wl - 510) / (580 - 510);\r\n        G = 1;\r\n        B = 0;\r\n    } else if (wl >= 580 && wl < 645) {\r\n        R = 1;\r\n        G = -1 * (wl - 645) / (645 - 580);\r\n        B = 0.0;\r\n    } else if (wl >= 645 && wl <= 780) {\r\n        R = 1;\r\n        G = 0;\r\n        B = 0;\r\n    } else {\r\n        R = 0;\r\n        G = 0;\r\n        B = 0;\r\n    }\r\n  \r\n    // intensty is lower at the edges of the visible spectrum.\r\n    if (wl > 780 || wl < 380) {\r\n        alpha = 0;\r\n    } else if (wl > 700) {\r\n        alpha = (780 - wl) / (780 - 700);\r\n    } else if (wl < 420) {\r\n        alpha = (wl - 380) / (420 - 380);\r\n    } else {\r\n        alpha = 1;\r\n    }\r\n  \r\n    colorSpace = [\"rgba(\" + (R * 100) + \"%,\" + (G * 100) + \"%,\" + (B * 100) + \"%, \" + alpha + \")\", R, G, B, alpha]\r\n  \r\n    // colorSpace is an array with 5 elements.\r\n    // The first element is the complete code as a string.  \r\n    // Use colorSpace[0] as is to display the desired color.  \r\n    // use the last four elements alone or together to access each of the individual r, g, b and a channels.  \r\n  \r\n    return colorSpace;\r\n  \r\n}\r\n  \r\n/**\r\n * Calculate the height of spectral lines from incoming ray\r\n * as they would appear on a screen.\r\n * @param {Number} d Distance from diffraction grating to screen.\r\n * @param {Number} lambda Wavelength.\r\n * @param {Number} a Distance between diffraction grating slits.\r\n */\r\nexport function diffractionHeight(d, lambda, a) {\r\n    return d * lambda / Math.sqrt(a * a - lambda * lambda)\r\n}","import React from 'react'\r\nimport Positioned from 'Components/Positioned'\r\nimport { wavelengthToColor, diffractionHeight } from 'Utilities/spectralUtilities'\r\n\r\n\r\nconst Screen = props => {\r\n    const { screenDistance, gratingSpacing, coordinates, height } = props\r\n    const lines = props.lines.map(line => ({\r\n        wavelength: line,\r\n        height: diffractionHeight(screenDistance, line, gratingSpacing),\r\n        color: wavelengthToColor(line)[0],\r\n    }))\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        height: `${height}`,\r\n        width: '120px',\r\n        transform: 'translateY(-50%)',\r\n        border: 'none',\r\n        borderLeft: '1px solid white',\r\n        borderRight: '1px solid white',\r\n        boxSizing: 'border-box',\r\n        background: 'black',\r\n    }\r\n\r\n    const SpectralLine = ({ color, height }) => {\r\n        return (\r\n            <div style={{\r\n                position: 'absolute',\r\n                top: '50%',\r\n                width: '200px',\r\n                transform: `translateY(${-(height + 1)}px)`,\r\n                height: '2px',\r\n                display: \"flex\",\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                gap: '4px',\r\n            }}>\r\n                <div style={{\r\n                    width: '112px',\r\n                    height: '2px',\r\n                    margin: '0 4px',\r\n                    background: color,\r\n                }} />\r\n                <div style={{\r\n                    color: \"white\",\r\n                    fontSize: '0.825rem'\r\n                }}>{Math.round(height)}mm</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Positioned coordinates={coordinates}>\r\n            <div style={{display:'flex',flexDirection:'row'}}>\r\n                <div style={style}>\r\n                    <SpectralLine color='white' height={0}/>\r\n                    {lines.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            <SpectralLine color={line.color} height={line.height} />                        \r\n                            <SpectralLine color={line.color} height={-line.height} />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </Positioned>\r\n    )\r\n}\r\n\r\nexport default Screen","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\n\r\nconst root = document.getElementById('root')\r\nconst renderApp = Component => {\r\n  ReactDOM.render(\r\n    <Component />,\r\n    root\r\n  )\r\n}\r\n\r\nrenderApp(App)","import React from 'react'\r\nimport Positioned from 'Components/Positioned'\r\n\r\nconst Source = ({\r\n    coordinates,\r\n    color,\r\n    border,\r\n    glow,\r\n}) => {\r\n    return (\r\n        <Positioned coordinates={coordinates}>\r\n            <div\r\n                className='source'\r\n                style={{\r\n                    height: '14px',\r\n                    width: '14px',\r\n                    borderRadius: '50%',\r\n                    background: `${color}`,\r\n                    borderColor: `${border}`,\r\n                    boxShadow: `${glow} 0 0 12px 12px`,\r\n                }}\r\n            />\r\n        </Positioned>\r\n    )\r\n}\r\n\r\nexport default Source","import React from 'react'\r\nimport Positioned from 'Components/Positioned'\r\n\r\nconst Grate = ({\r\n    coordinates = { x: 0, y: 0 },\r\n}) => {\r\n    return (\r\n        <Positioned coordinates={coordinates}>\r\n            <div\r\n                className='grate'\r\n                style={{\r\n                    width: '4px',\r\n                    height: '400px',\r\n                    background: 'gray',\r\n                }}\r\n            />\r\n        </Positioned>\r\n    )\r\n}\r\n\r\nexport default Grate","import React from 'react'\r\nimport { wavelengthToColor, diffractionHeight } from 'Utilities/spectralUtilities'\r\n\r\nconst Rays = props => {\r\n    const {\r\n        coordinates,\r\n        sourceCoordinates,\r\n        screenCoordinates,\r\n        screenHeight,\r\n        screenDistance,\r\n        gratePosition,\r\n        diffractionSpacing,\r\n    } = props\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: `${coordinates.x}%`,\r\n        transform: 'translateY(-50%)',\r\n        width: '100%',\r\n        height: `${screenHeight}px`,\r\n        stroke: 'white',\r\n        strokeDasharray: '4px',\r\n    }\r\n    const sourceRayStyle = {\r\n        position: 'absolute',\r\n        left: `${sourceCoordinates.x}%`,\r\n        width: `${gratePosition - sourceCoordinates.x}%`,\r\n        height: '100%',\r\n    }\r\n    const diffractedRaysStyle = {\r\n        position: 'absolute',\r\n        right: `${100 - screenCoordinates.x}%`,\r\n        width: `${screenCoordinates.x - gratePosition}%`,\r\n        height: '100%',\r\n    }\r\n    \r\n    return (\r\n        <div style={style}>\r\n            <svg style={sourceRayStyle}>\r\n                <line x1=\"0\" y1=\"50%\" x2='100%' y2=\"50%\" />\r\n            </svg>\r\n            <svg style={diffractedRaysStyle}>\r\n                <line x1=\"100%\" y1=\"50%\" x2=\"0\" y2=\"50%\" />\r\n                {props.lines.map(dline => (\r\n                    <React.Fragment key={dline}>\r\n                        <line\r\n                            x1=\"100%\"\r\n                            y1={`${(screenHeight / 2 - diffractionHeight(screenDistance, dline, diffractionSpacing)) / screenHeight * 100}%`}\r\n                            x2=\"0\"\r\n                            y2=\"50%\"\r\n                            style={{ stroke: wavelengthToColor(dline)[0] }}\r\n                        />\r\n                        <line\r\n                            x1=\"100%\"\r\n                            y1={`${100 - (screenHeight / 2 - diffractionHeight(screenDistance, dline, diffractionSpacing)) / screenHeight * 100}%`}\r\n                            x2=\"0\"\r\n                            y2=\"50%\"\r\n                            style={{ stroke: wavelengthToColor(dline)[0] }}\r\n                        />\r\n                    </React.Fragment>\r\n                ))}\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rays","import React from 'react'\r\nimport './workbench.scss'\r\nimport Screen from './Screen'\r\nimport Source from './Source'\r\nimport Grate from './Grate'\r\nimport Rays from './Rays'\r\n\r\n\r\nconst Workbench = ({\r\n    source,\r\n    grating,\r\n    screenDistance,\r\n    minScreenDistance,\r\n    maxScreenDistance,\r\n}) => {\r\n    const screenHeight = 600    // In pixels\r\n\r\n    const grateX = 60 - 20 * (screenDistance - minScreenDistance) / (maxScreenDistance - minScreenDistance)\r\n\r\n    return (\r\n        <div className='workbench' style={{ minHeight: screenHeight }}>\r\n            <div className='scaling'>\r\n                <Source\r\n                    coordinates={{ x: 10, y: 50 }}\r\n                    color={source.sourceColor}\r\n                    border={source.sourceBorder}\r\n                    glow={source.sourceGlow}\r\n                />\r\n                <Grate\r\n                    coordinates={{ x: grateX, y: 50 }}\r\n                />\r\n                <Screen\r\n                    coordinates={{ x: 82, y: 50 }}\r\n                    height={`${screenHeight}px`}\r\n                    sourceColor={source.sourceColor}\r\n                    screenDistance={screenDistance}\r\n                    gratingSpacing={grating.period}\r\n                    lines={source.lines}\r\n                />\r\n                <Rays\r\n                    sourceCoordinates={{ x: 10, y: 50 }}\r\n                    screenCoordinates={{ x: 82, y: 50 }}\r\n                    screenHeight={screenHeight}\r\n                    screenDistance={screenDistance}\r\n                    diffractionSpacing={grating.period}\r\n                    coordinates={{ x: 50, y: 50 }}\r\n                    gratePosition={grateX}\r\n                    lines={source.lines}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Workbench","import React, { useState } from 'react'\r\nimport Toolbar from 'Components/Toolbar'\r\nimport Workbench from 'Components/Workbench'\r\nimport elements from 'Data/elements.json'\r\nimport gratings from 'Data/gratings.json'\r\n\r\nconst SpectralLab = () => {\r\n    const [source, setSource] = useState(elements.hydrogen)\r\n    const [grating, setGrating] = useState(gratings[0])\r\n    const [screenDistance, setScreenDistance] = useState(400)   // Represents millimeters\r\n    const screenRange = [300, 450]      // Min and max values for screen distance\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar\r\n                sources={elements}\r\n                currentSource={source}\r\n                onChangeSource={newSource => setSource(newSource)}\r\n                gratings={gratings}\r\n                currentGrating={grating}\r\n                onChangeGrating={newGrating => setGrating(newGrating)}\r\n                currentScreenDistance={screenDistance}\r\n                minScreenDistance={screenRange[0]}\r\n                maxScreenDistance={screenRange[1]}\r\n                onChangeScreenDistance={newDistance => setScreenDistance(newDistance)}\r\n            />\r\n            <Workbench\r\n                source={source}\r\n                grating={grating}\r\n                screenDistance={screenDistance}\r\n                minScreenDistance={screenRange[0]}\r\n                maxScreenDistance={screenRange[1]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpectralLab","import React from 'react';\r\nimport SpectralLab from 'Components/SpectralLab'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <SpectralLab />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}